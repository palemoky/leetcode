#!/bin/sh

# 获取 Git 仓库的根目录。这是为了确保无论从哪个子目录运行 git commit，脚本的执行上下文都是在项目根目录。
REPO_ROOT="$(git rev-parse --show-toplevel)"
cd "$REPO_ROOT" || exit 1

# 定义需要处理的语言的后缀名
langs="go py rs"
# 定义与上述语言一一对应的子目录名
dirs="go python rust"

# 初始化一个计数器，用于将语言、目录和格式化命令关联起来
i=0
for lang in $langs; do
    # 查找在本次提交中 **已暂存（staged）** 的、且文件后缀匹配当前语言的文件列表
    # `git diff --cached --name-only` 列出所有已暂存的文件名
    # `grep "\.${lang}$"` 从中过滤出以 ".<语言后缀>" 结尾的文件
    staged_files=$(git diff --cached --name-only | grep "\.${lang}$")

    # 检查 `staged_files` 变量是否不为空。如果不为空，说明有匹配的文件需要处理
    if [ -n "$staged_files" ]; then
        # 从 `dirs` 字符串中，根据计数器 `i` 提取出当前语言对应的目录名
        # `cut -d' ' -f$((i+1))` 表示以空格为分隔符，取第 i+1 个字段
        dir=$(echo "$dirs" | cut -d' ' -f$((i+1)))

        fmt_cmd=""
        # 用 case 语句根据当前语言选择相应的格式化命令，这种方式比 Bash 风格的数组更具可移植性，在所有 sh 环境下都能正常工作
        case "$lang" in
            "go")
                # Go 语言使用 goimports 进行格式化和 import 排序
                fmt_cmd="goimports -w ."
                ;;
            "py")
                # Python 语言使用 black 进行格式化
                fmt_cmd="black ."
                ;;
            "rs")
                # Rust 语言使用 cargo fmt 进行格式化
                fmt_cmd="cargo fmt"
                ;;
        esac

        echo "Running formatter for staged .$lang files..."
        # 进入到特定语言的子目录。因为很多格式化工具需要在此路径下才能找到配置文件（如 go.mod, Cargo.toml）
        cd "./$dir" || { echo "Failed to cd to $dir"; exit 1; }
        # 使用 eval 执行格式化命令。`eval` 很有用，因为命令本身可能包含空格和多个参数
        eval "$fmt_cmd" || { echo "Failed to run formatter for $lang"; exit 1; }
        # 执行完毕后，返回到上一个目录（即仓库根目录）
        # `> /dev/null` 是为了不显示 cd 命令的输出，保持终端干净
        cd - > /dev/null

        # 格式化工具可能会修改这些文件，`git add` 会将这些修改更新到暂存区，从而确保提交的是格式化之后的内容。
        # 这样做可以精确地只处理最初暂存的文件，避免将工作区其他被修改的文件（如 b.go）也添加进来
        echo "$staged_files" | xargs git add || { echo "Failed to re-stage formatted $lang files"; exit 1; }

        echo "Staged $lang files were reformatted. Please review the changes."
    fi

    i=$((i+1))
done
