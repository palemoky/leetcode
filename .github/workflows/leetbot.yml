name: LeetBot CI

on:
  push:
    branches: [main, master]
    paths:
      - "go/**"
      - "python/**"
      - "rust/**"
      - ".github/workflows/leetbot.yml"
  pull_request:
    paths:
      - "go/**"
      - "python/**"
      - "rust/**"
      - ".github/workflows/leetbot.yml"

# 并发控制，自动取消对同一PR的旧CI运行
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      go: ${{ steps.filter.outputs.go }}
      python: ${{ steps.filter.outputs.python }}
      rust: ${{ steps.filter.outputs.rust }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          # 使用更精确的 glob 模式来定义过滤器，只有代码变更才会触发
          filters: |
            go:
              - 'go/**/*.go'
            python:
              - 'python/**/*.py'
            rust:
              - 'rust/**/*.rs'

  go:
    needs: filter
    if: needs.filter.outputs.go == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: go
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache-dependency-path: go/go.sum

      - name: Cache Go Tools
        uses: actions/cache@v4
        id: go-tools-cache
        with:
          path: ~/go/bin
          key: go-tools-${{ runner.os }}-v20250802
          restore-keys: |
            go-tools-${{ runner.os }}-

      - name: Install Tools
        if: steps.go-tools-cache.outputs.cache-hit != 'true'
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install gotest.tools/gotestsum@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Lint and Format Check
        run: |
          goimports -w .
          if ! git diff --exit-code; then
            echo "Go files are not correctly formatted. Please run 'goimports -w .'"
            exit 1
          fi
          staticcheck ./...

      - name: Run tests with coverage
        run: |
          # go test -coverprofile=cover.out ./...
          gotestsum --format short --no-summary=skipped -- -coverprofile=cover.out ./...
          echo "Checking Go test coverage..."
          go tool cover -func=cover.out

          coverage=$(go tool cover -func=cover.out | grep '^total:' | awk '{gsub(/%/, "", $3); print $3}')
          echo "Total coverage: ${coverage}%"

          # 优先使用 bc 进行精确浮点数比较
          if command -v bc >/dev/null 2>&1; then
            if [ "$(echo "$coverage < 97.0" | bc -l)" = "1" ]; then
              echo "Coverage ${coverage}% is below threshold 97.0%"
              exit 1
            fi
          else
            coverage_int=$(echo "$coverage" | awk '{printf "%.0f", $1}')
            if [ "$coverage_int" -lt 97 ]; then
              echo "Coverage ${coverage}% is below threshold 97.0%"
              exit 1
            fi
          fi

          echo "Coverage ${coverage}% meets the threshold ✓"

  python:
    needs: filter
    if: needs.filter.outputs.python == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"
          cache-dependency-path: "python/requirements.txt"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Lint and Format Check
        run: |
          black --check .
          flake8 .

      - name: Run tests
        run: pytest

  rust:
    needs: filter
    if: needs.filter.outputs.rust == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: rust
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust with cache
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          cache: true

      - name: Lint and Format Check
        run: |
          cargo fmt -- --check
          # -D warnings 将所有警告视为错误，是非常好的实践
          cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test --all-targets
